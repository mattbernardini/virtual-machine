"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const Runner_1 = __importDefault(require("../Runner"));
const Config_1 = require("../Config");
function gpp(optOrInput, output, log = true) {
    return __awaiter(this, void 0, void 0, function* () {
        let binary = 'g++';
        let args = [];
        let env;
        if (typeof optOrInput === 'string') {
            args.push(optOrInput);
            output && args.push('-o', output);
        }
        else {
            env = Config_1.ProcessEnv(optOrInput);
            if (optOrInput.binaries && optOrInput.binaries["g++"])
                binary = optOrInput.binaries["g++"];
            args.push(...Config_1.ProcessGppOpt(optOrInput));
            log = optOrInput.log || false;
        }
        args.unshift(binary);
        return yield Runner_1.default(args, log, env);
    });
}
exports.default = gpp;
;
