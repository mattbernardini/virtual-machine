#!/usr/bin/env node
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = require("fs");
const chalk_1 = __importDefault(require("chalk"));
const commander_1 = __importDefault(require("commander"));
const _1 = __importDefault(require("."));
let { version } = require('../package.json');
commander_1.default.version(version)
    .option('-i, --init', 'Initialise a new gnucc project.')
    .parse(process.argv);
if (commander_1.default.init) {
    fs_1.writeFileSync('gnucc.json', JSON.stringify({
        input: [
            'src/**/*.cpp',
            'src/**/*.cc',
            'src/**/*.c'
        ],
        objOut: 'build/obj',
        output: 'build/bin'
    }, undefined, '\t'));
    console.log(chalk_1.default `{green Created configuration file!}`);
}
else {
    if (fs_1.existsSync('gnucc.json')) {
        let config = JSON.parse(fs_1.readFileSync('gnucc.json').toString());
        let opt = Object.assign(config, { project: true, log: true });
        _1.default(opt).catch(err => console.log(chalk_1.default.red(err)));
    }
    else {
        console.error(chalk_1.default `{red Configuration file does not exist!}\n{gray Run {white gnucc --init} to generate one.}`);
    }
}
