"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var OPTIMISATION;
(function (OPTIMISATION) {
    /** Reduce compilation time and make debugging produce the expected results. This is the default. */
    OPTIMISATION["DEFAULT"] = "0";
    /** Optimize. Optimizing compilation takes somewhat more time, and a lot more memory for a large function. */
    OPTIMISATION["LOW"] = "1";
    /** Optimize even more. GCC performs nearly all supported optimizations that do not involve a space-speed tradeoff. */
    OPTIMISATION["MEDIUM"] = "2";
    /** Optimize yet more. -O3 turns on all optimizations specified by -O2 and also turns on the -finline-functions, -funswitch-loops, -fpredictive-commoning, -fgcse-after-reload, -ftree-vectorize and -fipa-cp-clone options. */
    OPTIMISATION["HIGH"] = "3";
    /** Optimize for size. -Os enables all -O2 optimizations that do not typically increase code size. It also performs further optimizations designed to reduce code size. */
    OPTIMISATION["FILESIZE"] = "s";
    /** O3 with fast calculations */
    OPTIMISATION["FAST"] = "fast";
})(OPTIMISATION = exports.OPTIMISATION || (exports.OPTIMISATION = {}));
;
var STAGES;
(function (STAGES) {
    /** Stop after the preprocessing stage; do not run the compiler proper. */
    STAGES["PREPROCESSING"] = "-E";
    /** Compile or assemble the source files, but do not link. */
    STAGES["COMPILE"] = "-c";
})(STAGES = exports.STAGES || (exports.STAGES = {}));
;
var WARN;
(function (WARN) {
    /** Log all warnings */
    WARN["ALL"] = "all";
    /** Make all warnings into errors */
    WARN["ERROR"] = "error";
    /** Enables some extra warning flags taht are not enabled by -Wall */
    WARN["EXTRA"] = "extra";
    /**
     * DIALECT WARNINGS
     */
    /** Warn when G++ generates code that is probably not compatible with the vendor-neutral C ++ ABI. */
    WARN["ABI"] = "abi";
    /** Warn when a class seems unusable because all the constructors or destructors in that class are private, and it has neither friends nor public static member functions. */
    WARN["UNUSABLE"] = "ctor-dtor-privacy";
    /** Warn when a class has virtual functions and accessible non-virtual destructor, in which case it would be possible but unsafe to delete an instance of a derived class through a pointer to the base class. */
    WARN["NON_VIRTUAL"] = "non-virtual-dtor";
    /** Warn when the order of member initializers given in the code does not match the order in which they must be executed. */
    WARN["REORDER"] = "reorder";
    /** Warn about violations of the following style guidelines from Scott Meyers' Effective C ++ book */
    WARN["EFFECTIVE"] = "effc++";
    /** Warn also about the use of an uncasted "NULL" as sentinel. */
    WARN["NULL_SENTINEL"] = "strict-null-sentinel";
    /** Disable warnings when non-templatized friend functions are declared within a template. */
    WARN["NON_TEMPLATIZED_FRIENDS"] = "no-non-template-friend";
    /** Warn if an old-style (C-style) cast to a non-void type is used within a C ++ program. */
    WARN["OLD_CAST"] = "old-style-cast";
    /** Warn when a function declaration hides virtual functions from a base class. */
    WARN["OVERLOADED_VIRTUAL"] = "overloaded-virtual";
    /** Disable the diagnostic for converting a bound pointer to member function to a plain pointer. */
    WARN["PMF_CONVERSIONS"] = "no-pmf-conversions";
    /** Warn when overload resolution chooses a promotion from unsigned or enumerated type to a signed type, over a conversion to an unsigned type of the same size. */
    WARN["OVERLOADED_RESOLUTION"] = "sign-promo";
    /**
     * SYNTAX / LOGIC WARNINGS
     */
    WARN["CHAR_SUBSCRIPTS"] = "char-subscripts";
    WARN["COMMENTS"] = "comment";
    WARN["FORMAT"] = "format";
    WARN["FORMAT_Y2K"] = "format-y2k";
    WARN["NO_FORMAT_CONTAINS_NUL"] = "no-format-contains-nul";
    WARN["NO_FORMAT_EXTRA_ARGS"] = "no-format-extra-args";
    WARN["NO_FORMAT_ZERO_LENGTH"] = "no-format-zero-length";
    WARN["FORMAT_NONLITERAL"] = "format-nonliteral";
    WARN["FORMAT_SECURITY"] = "format-security";
    WARN["NON_NULL"] = "nonnull";
    WARN["INIT_SELF"] = "init-self";
    WARN["IMPLICIT_INT"] = "implict-int";
    WARN["IMPLICIT_FUNCTION_DECLARATION"] = "implicit-function-declaration";
    WARN["IMPLICIT"] = "implicit";
    WARN["IGNORED_QUALIFIERS"] = "ignored-qualifiers";
    WARN["MAIN"] = "main";
    WARN["MISSING_BRACES"] = "missing-braces";
    WARN["MISSING_INCLUDE_DIRS"] = "missing-include-dirs";
    WARN["PARENTHESES"] = "parentheses";
    WARN["SEQUENCE_POINT"] = "sequence-point";
    WARN["RETURN_TYPE"] = "return-type";
    WARN["SWITCH"] = "switch";
    WARN["SWITCH_DEFAULT"] = "switch-default";
    WARN["SWITCH_ENUM"] = "switch-enum";
    WARN["SYNC_NAND"] = "sync-nand";
    WARN["TRIGRAPHS"] = "trigraphs";
    WARN["UNUSED_SET_PARAM"] = "unused-but-set-parameter";
    WARN["UNUSED_SET_VAR"] = "unused-but-set-variable";
    WARN["UNUSED_FUNC"] = "unused-function";
    WARN["UNUSED_LABEL"] = "unused-label";
    WARN["UNUSED_PARAM"] = "unused-parameter";
    WARN["UNUSED_VAR"] = "unused-var";
    WARN["UNUSED_VAL"] = "unused-value";
    WARN["UNUSED"] = "unused";
    WARN["UNINITIALIZED"] = "uninitialized";
    WARN["UNKNOWN_PRAGMAS"] = "unknown-pragmas";
    WARN["NO_PRAGMAS"] = "no-pragmas";
    WARN["STRICT_ALIASING"] = "string-aliasing";
    WARN["STRICT_OVERFLOW"] = "string-overflow";
    WARN["ARRAY_BOUNDS"] = "array-bounds";
    WARN["NO_ZERO_DIVISION"] = "no-div-by-zero";
    WARN["SYSTEM_HEADERS"] = "system-headers";
    WARN["FLOAT_EQ"] = "float-equal";
    WARN["TRADITIONAL"] = "traditional";
    WARN["TRADITIONAL_CONVERSION"] = "traditional-conversion";
    WARN["UNDEFINED"] = "undef";
    WARN["NO_ENDIF"] = "no-endif-labels";
    WARN["SHADOW"] = "shadow";
    WARN["UNSAFE_LOOP_OPTIMISATIONS"] = "unsafe-loop-optimizations";
    WARN["NO_PEDANTIC_MS"] = "no-pedantic-ms-format";
    WARN["POINTER_ARITH"] = "pointer-artih";
    WARN["TYPE_LIMITS"] = "type-limits";
    WARN["BAD_FUNC_CAST"] = "bad-function-cast";
    WARN["CAST_QUALIFIER"] = "cast-qual";
    WARN["CAST_ALIGN"] = "cast-align";
    WARN["WRITE_STR"] = "write-strings";
    WARN["CLOBBERED"] = "clobbered";
    WARN["CONVERSION"] = "conversion";
    WARN["EMPTY_BODY"] = "empty-body";
    WARN["ENUM_COMPARE"] = "enum-compare";
    WARN["SIGN_COMPARE"] = "sign-compare";
    WARN["SIGN_CONVERSION"] = "sign-conversion";
    WARN["ADDRESS"] = "address";
    WARN["LOGICAL_OP"] = "logical-op";
    WARN["AGGREGATE_RETURN"] = "aggregate-return";
    WARN["NO_ATTRS"] = "no-attributes";
    WARN["NO_MACRO_REDEFINE"] = "no-builtin-macro-redefined";
    WARN["STRICT_PROTOTYPES"] = "strict-prototypes";
    WARN["OLD_STYLE_DECL"] = "old-style-declaration";
    WARN["OLD_STYLE_DEF"] = "old-style-definition";
    WARN["MISSING_PARAM_TYPE"] = "missing-parameter-type";
    WARN["MISSING_PROTOTYPES"] = "missing-prototypes";
    WARN["MISSING_DECLARATIONS"] = "missing-declarations";
    WARN["MISSING_FIELD_ININT"] = "missing-field-initializers";
    WARN["MISSING_NO_RETURN"] = "missing-noreturn";
    WARN["MISSING_FORMAT_ATTR"] = "missing-format-attribute";
    WARN["NO_MULTICHAR"] = "no-multichar";
    WARN["NO_DEPRECATED"] = "no-deprecated";
    WARN["NO_DEPRECATED_DECLARATIONS"] = "no-deprecated-declarations";
    WARN["NO_OVERFLOW"] = "no-overflow";
    WARN["OVERRIDE_INIT"] = "override-init";
    WARN["PACKED"] = "packed";
    WARN["PACKET_BITFIELD"] = "packed-bitfield-compat";
    WARN["PADDED"] = "padded";
    WARN["REDUNDANT_DECL"] = "redundant-decls";
    WARN["NESTED_EXTERNS"] = "nested-externs";
    WARN["UNREACHABLE_CODE"] = "unreachable-code";
    WARN["INLINE"] = "inline";
    WARN["NO_INVALID_OFFSETOF"] = "no-invalid-offsetof";
    WARN["NO_INT_TO_POINTER_CAST"] = "no-int-to-pointer-cast";
    WARN["NO_POINTER_TO_INT_CAST"] = "no-pointer-to-int-cast";
    WARN["INVALID_PCH"] = "invalid-pch";
    WARN["LONG_LONG"] = "long-long";
    WARN["VARIADIC_MACROS"] = "variadic-macros";
    WARN["VLA"] = "vla";
    WARN["VOLATILE_REGISTER_VAR"] = "volatile-register-var";
    WARN["DISABLED_OPTIMISATION"] = "disable-optimization";
    WARN["POINTER_SIGN"] = "pointer-sign";
    WARN["STACK_PROTECTOR"] = "stack-protector";
    WARN["NO_MUDFLAP"] = "no-mudflap";
    WARN["OVERLENGTH_STRINGS"] = "overlength-strings";
})(WARN = exports.WARN || (exports.WARN = {}));
;
var DEBUG;
(function (DEBUG) {
    /**
     * Level of debugging information
     */
    DEBUG["MINIMAL"] = "1";
    DEBUG["EXTRA"] = "3";
    /**
     * Tools
     */
    DEBUG["GDB"] = "gdb";
    DEBUG["STABS"] = "stabs";
    DEBUG["STABS_PLUS"] = "stabs+";
    DEBUG["COFF"] = "coff";
    DEBUG["XCOFF"] = "xcoff";
    DEBUG["XCOFF_PLUS"] = "xcoff+";
    DEBUG["VMS"] = "vms";
})(DEBUG = exports.DEBUG || (exports.DEBUG = {}));
;
;
;
;
